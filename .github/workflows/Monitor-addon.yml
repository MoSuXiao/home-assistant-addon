name: Monitor Addon Release

on:
  # schedule:
    # - cron: '0 17 * * *'
  # 手动触发（方便测试）
  workflow_dispatch:

jobs:
  # 并行监控每个仓库
  monitor:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check EspHome-Addon release
        uses: ./.github/actions/check-release
        with:
          owner: esphome
          repo: home-assistant-addon

      - name: Check EspHome release
        uses: ./.github/actions/check-release
        with:
          owner: esphome
          repo: esphome

      - name: Collect new releases
        id: collect
        run: |
          # 检查是否有新版本
          ls -a .github/
          if [ -d ".github/temp_releases" ] && [ "$(ls -A .github/temp_releases)" ]; then
            echo "new_releases=true" >> $GITHUB_OUTPUT
          
            # 获取文件列表
            releases=(.github/temp_releases/*)
  
            # 计算文件数量
            release_count=${#releases[@]}
          
            # 构建通知消息
            message_title="检测通知：🎉 发现 $release_count 个新版本更新"
            message_body="Release通知："

            for file in .github/temp_releases/*.json; do
              # 从 JSON 文件读取信息
              owner=$(jq -r '.owner' "$file")
              repo=$(jq -r '.repo' "$file")
              version=$(jq -r '.version' "$file")
              previous=$(jq -r '.previous' "$file")
              url=$(jq -r '.url' "$file")
              body=$(jq -r '.body' "$file")

              # 追加到消息主体
              message_body+="\n\n### [${owner}/${repo}](${url})\n\n"
              message_body+="**版本:** [${version}]\n\n"

              if [ "$previous" != "null" ]; then
                message_body+="**上一版本:** [${previous}]\n\n"
              fi

              # 截取前 500 字符的描述（避免消息过长）
              if [ ${#body} -gt 500 ]; then
                body="${body:0:500}..."
              fi

              message_body+="**更新内容:**\n\n${body}\n\n"
            done

            # 保存消息到环境变量
            echo "message_title=$message_title" >> $GITHUB_OUTPUT
            echo "message_body<<EOF" >> $GITHUB_OUTPUT
            echo "$message_body" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT

            echo "Found new releases to notify"
          else
            echo "new_releases=false" >> $GITHUB_OUTPUT
            echo "No new releases found"
          fi

      - name: Send DingTalk notification
        if: steps.collect.outputs.new_releases == 'true'
        run: |
          # 设置时区为东八区并格式化时间
          timestamp=$(TZ='Asia/Shanghai' date +"%Y-%m-%d %H:%M:%S%:z")

          # 构建钉钉消息
          message=$(cat <<EOF
          {
            "msgtype": "markdown",
            "markdown": {
              "title": "${{ steps.collect.outputs.message_title }}",
              "text": "🚀 **检测时间: $timestamp**\n\n${{ steps.collect.outputs.message_body }}"
            },
            "at": {
              "isAtAll": false
            }
          }
          EOF
          )

          # 发送通知
          curl -s -X POST "${{ secrets.DINGTALK_WEBHOOK }}" \
            -H "Content-Type: application/json" \
            -d "$message"

          echo "Notification sent for new releases"

      - name: Commit updated release files
        if: steps.collect.outputs.new_releases == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .github/*_*_last_release.txt
          git commit -m "Update last release versions"
          git push